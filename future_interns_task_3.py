# -*- coding: utf-8 -*-
"""Future Interns - Task 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vX88RQeBQ7XbObOXloZ72hhMOyyb87WA
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from textblob import TextBlob
from wordcloud import WordCloud
sns.set(style="whitegrid", palette="muted")

from google.colab import files
uploaded = files.upload()
df = pd.read_csv("student_feedback_task3.csv")
print("Dataset Preview:")
print(df.head())

print("\nMissing values:\n", df.isnull().sum())
df = df.drop_duplicates()
df['Feedback'] = df['Feedback'].fillna("No Comment")
print("\nAfter cleaning:")
print(df.info())

print("\nRatings Summary:")
print(df['Rating'].describe())
print("\nRatings Count:")
print(df['Rating'].value_counts())

rating_counts = df['Rating'].value_counts().sort_index()
sns.barplot(x=rating_counts.index, y=rating_counts.values)
plt.title("Distribution of Ratings")
plt.xlabel("Rating (1-5)")
plt.ylabel("Number of Students")
plt.show()

avg_event_rating = df.groupby("Event")['Rating'].mean().sort_values(ascending=False)
print("\nAverage Rating per Event:")
print(avg_event_rating)

avg_event_rating.plot(kind='bar', figsize=(8,5))
plt.title("Average Rating per Event")
plt.ylabel("Average Rating")
plt.show()

def get_sentiment(text):
    return TextBlob(str(text)).sentiment.polarity
df['Sentiment_Score'] = df['Feedback'].apply(get_sentiment)
def categorize(score):
    if score > 0:
        return "Positive"
    elif score < 0:
        return "Negative"
    else:
        return "Neutral"
df['Sentiment'] = df['Sentiment_Score'].apply(categorize)
print("\nSentiment Distribution:")
print(df['Sentiment'].value_counts())

df['Sentiment'].value_counts().plot(kind='pie', autopct='%1.1f%%', figsize=(6,6))
plt.title("Sentiment Distribution")
plt.ylabel("")
plt.show()
sns.countplot(data=df, x="Event", hue="Sentiment")
plt.title("Sentiment by Event")
plt.xticks(rotation=45)
plt.show()

positive_text = " ".join(df[df['Sentiment']=="Positive"]['Feedback'])
wordcloud = WordCloud(width=800, height=400, background_color="white").generate(positive_text)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Positive Feedback Word Cloud")
plt.show()

negative_text = " ".join(df[df['Sentiment']=="Negative"]['Feedback'])
wordcloud = WordCloud(width=800, height=400, background_color="black", colormap="Reds").generate(negative_text)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Negative Feedback Word Cloud")
plt.show()

print("🔍 Key Insights:")
print("\nTop 3 Events by Rating:")
print(avg_event_rating.head(3))
print("\nSentiment Counts:")
print(df['Sentiment'].value_counts())
print("\nSample Complaints:")
print(df[df['Sentiment']=="Negative"]['Feedback'].head(5))
print("\n✅ Recommendations:")
print("- Focus on improving time management and reducing technical issues.")
print("- Workshops and Tech Fests are highly rated; more such events should be organized.")
print("- Increase interactivity in seminars to improve engagement.")

from IPython.display import display
import ipywidgets as widgets

# Computing key metrics
avg_rating = df['Rating'].mean()
max_rating = df['Rating'].max()
min_rating = df['Rating'].min()
top_question = df.groupby("Event")['Rating'].mean().idxmax()
least_question = df.groupby("Event")['Rating'].mean().idxmin()

# Displaying as Markdown
display(widgets.HTML(f"""
<h3>Student Feedback Dashboard</h3>
<ul>
<li><b>Average Rating:</b> {avg_rating:.2f}</li>
<li><b>Max Rating:</b> {max_rating}</li>
<li><b>Min Rating:</b> {min_rating}</li>
<li><b>Top Rated Event:</b> {top_question}</li>
<li><b>Least Rated Event:</b> {least_question}</li>
</ul>
"""))

import matplotlib.pyplot as plt
import seaborn as sns

# Average rating per event
avg_event_rating = df.groupby("Event")['Rating'].mean().sort_values(ascending=False)

plt.figure(figsize=(8,5))
sns.barplot(x=avg_event_rating.index, y=avg_event_rating.values, palette="viridis")
plt.title("Average Rating per Event")
plt.ylabel("Average Rating")
plt.xlabel("Event")
plt.show()


# Sentiment distribution
sentiment_counts = df['Sentiment'].value_counts()

plt.figure(figsize=(5,5))
plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', colors=['green','grey','red'])
plt.title("Sentiment Distribution")
plt.show()


# Ratings per event & sentiment
rating_sentiment = df.groupby(['Event','Sentiment']).size().unstack(fill_value=0)

rating_sentiment.plot(kind='bar', stacked=True, figsize=(10,5), colormap='Set2')
plt.title("Sum of Ratings by Event and Sentiment")
plt.ylabel("Number of Feedbacks")
plt.show()


# Table of average rating per event
avg_event_rating_df = df.groupby("Event")['Rating'].mean().reset_index()
avg_event_rating_df = avg_event_rating_df.sort_values(by="Rating", ascending=False)
display(avg_event_rating_df)